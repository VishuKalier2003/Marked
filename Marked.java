/* You are given a 0-indexed integer array nums...
Initially, all of the indices are unmarked... You are allowed to make this operation any number of times:
* Pick two different unmarked indices i and j such that 2 * nums[i] <= nums[j], then mark i and j...
Return the maximum possible number of marked indices in nums using the above operation any number of times...
* Eg 1 : nums = [3, 5, 2, 4]                       Output = 2 
* Eg 2 : nums = [9, 2, 5, 4]                       Output = 4
* Eg 3 : nums = [7, 6, 8]                          Output = 0
*/
import java.util.*;
public class Marked
{
    public int MaximumMarkedIndices(int nums[])
    {
        Arrays.sort(nums);                   // Sorting the nums array...
        int i = 0, j = nums.length - 1;       // Two pointers declaration...
        int pairs = 0;      // Initializing the number of marked pairs... 
        while(i <= j)
        {      // While the two indices do not cross...
            while(2 * nums[i] <= nums[j])     // If the condition is satisfied...
            {
                pairs++;      // Increment the number of marked pairs...
                j--;        // Decrement the right counter...
            }
            i++;      // Increment the left counter after linear iteration...
            j = nums.length - 1;       // Setting the right counter to original position...
        }
        return pairs;
    }
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int x;
        System.out.print("Enter size of the array : ");
        x = sc.nextInt();
        int nums[] = new int[x];
        for(int i = 0; i < nums.length; i++)
        {
            System.out.print("Enter data : ");
            nums[i] = sc.nextInt();
        }
        Marked marked = new Marked();         // Object creation...
        int indices = marked.MaximumMarkedIndices(nums);          // Function calling...
        System.out.println("The Total Number of Marked Indices : "+indices);
        sc.close();
    }
}


// Time Complexity - O(n log n) time...
// Space Complexity - O(n) space...
